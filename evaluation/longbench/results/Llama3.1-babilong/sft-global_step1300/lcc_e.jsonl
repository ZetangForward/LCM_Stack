{"dataset_name": "lcc_e", "pred_str": "\t\t\tprimerak.setInventarnaKnjiga(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setBrojPrimeraka((Integer)raspodelaSpinner.getValue());\n\t\t\tprimerak.setPreostalo(Integer.parseInt(preost", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "              SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueID\")]\n        public ISearchCondition<Int32", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "aliases.Add (\"GB2312_80\", \"gb2312\");\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        if source.get() == '[' + class_name:\n            return class_contents\n", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "#izracunavanje mera poklapanja izmedju slika i predstavnickih brojeva\n", "answers": ["check = numbers[5][123]"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        assertEquals(1L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n    }\n}  // end class\n", "answers": ["        sendBean(\"A\", null, null);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                item.setExpanded(true);\n                item.setSelection(true);\n                break;\n            }\n            if (item.getItemCount() > 0) {\n                restoreSelection(selectionText, item.getItems());\n            }\n        }\n    }\n    private void saveSettings() {\n        SettingsSaver.saveSettings(fetcherGui);\n    }\n    private", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        nilCard.setText(Language.INSTANCE.localizeWithReplace(\"instance.nodisplay\", \"\\n\\n\"));\n    }\n} \n\nThe code is written in Java and is part of a larger application. The code is a GUI component that displays a list of instances (game servers) and allows the user to filter them by name and", "answers": ["        if (nilCard != null) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w / h / h);\n\t\t}\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tInputStream is = new FileInputStream(file);\n\t\tbitmap = BitmapFactory.decodeStream(is);\n\t\tis.close();\n\t\theight = bitmap.getHeight();\n\t\twidth = bitmap.getWidth();\n", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            self.__repeat = (delay, interval)\n            self.__tick_id = gobject.timeout_add(10, self._tick_cb)\n        elif delay is None and self.__repeat[0] is not None:\n            self.__repeat = (None, None)\n            gobject.source_remove(self.__tick_id)\n", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    logger.addHandler(logged_critical)\n    return logged_critical\n", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        if self.getState() == 'running': \n```\n\nThe final answer is: \n```\n        if self.getState() == 'running': \n            self._wavemeterdll.Operation(self._cCtrlStop) #stops measurement\n", "answers": ["        if self.getState() == 'idle':"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        List<String> mustStatusNames = new LinkedList<String>();\n        mustStatusNames.add(\"available\");\n        mustStatusNames.add(\"dnd\");\n        mustStatusNames.add(\"xa\");\n        mustStatusNames.add(\"offline\");\n        mustStatusNames.add(\"unknown\");\n        mustStatusNames.add(\"proposed\");\n        must", "answers": ["        List<String> requiredStatusNames ="], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                            await cmd.ExecuteArmed(this, null);\n                        }\n                    });\n                }\n            }\n            await StartVote(options, poll);\n            return true;\n        }\n        private async Task pollTimer_Elapsed(object sender, ElapsedEventArgs e)\n        {\n            if (ActivePoll!= null)\n            {\n                await Active", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 52);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);\n\t\t\tthis.label1.TabIndex = 0;\n\t\t\tthis.label1.Text = \"Description\";\n\t\t\tthis.label1", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tif (throwOnMissing)\n\t\t\t\t\tthrow new Exception (\"Assembly not found: \" + name);\n\t\t\t\telse\n", "answers": ["\t\t\t\tif (assembly == null) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        if self.interface == 'all':\n            self.param_type = INTERFACE_ALL\n", "answers": ["        if self.interface == 'all':"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    for (int i = 0; i < s.length(); i++) {\n      if (!Character.isDigit(s.charAt(i)) && s.charAt(i)!= ',') return false;\n    }\n    return true;\n  }\n  // Helper method to test for all numerics and commas.\n  private boolean hasOnly", "answers": ["    for (int i = 0; i < s.length(); i++)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n} \n#endregion AuthorHeader\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                            sead_partnn_l = getNeighbours(nodemap, c_sead);\n                        }\n                        if (sead_partnn_l!= null) {\n                            for (int k = 0; (k < sead_partnn_l.size() &&!force_kill_path); k++) {\n                                Integer c_se", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    behavior = [{'code': o['code'], 'translation': translations_dict[o['code']]['translation'], 'category': translations_dict[o['code']]['category'], 'note': o['note'], 'loc': o['loc'], 'time': o['time']} for o in observations]\n    with open(OutFile", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "body += FULLCLEAR\n", "answers": ["        footer = self.write_footer(None)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            if abs(m.relative_alt) > max_relalt_mm:\n                self.progress(\"Relative Altitude %u mm\" % m.relative_alt)\n                self.progress(\"Expected to be on the ground\")\n                self.progress(\"Failed to hover\")\n                self.progress(\"Disarming\")\n                self.disarm_vehicle()\n                self.m", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar globalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = globalSettings;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tGame.SyncLobbyInfo();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"SyncLobby", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayload(buf);\n\t\t\t\tstate = SocketReadState.READ_NOTHING;\n\t\t\t\treturn bufferedPacket;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * This function will try to read", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        opiRuntimeToolBarDelegate = new OPIRuntimeToolBarDelegate(this, opiRuntimeDelegate);\n        opiRuntimeToolBarDelegate.init(site, input);\n        if (persist)\n        {\n            final IMemento memento = createMemento();\n            if (memento!= null)\n            {\n                saveMemento(memento);\n           ", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        }\n    }\n} \nPlease complete the code given below. \n\n```java\n", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def test_clean_name_two_word_surnames(self):  # pylint: disable=invalid-name\n", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            sort_by, sort_order = sort\n", "answers": ["            if sort[0] == 'uploadDate':"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            }\n        }\n    }\n} \nPlease complete the code given below. \n\n```csharp\n", "answers": ["                index = -1;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                parentpath = parentpath[len(cwd):].lstrip(os.sep) + os.sep\n", "answers": ["                parentpath = parentpath[len(cwd):]"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        if sys.version_info[0] == 2:\n            kwargs.pop('sinfo', None)\n        record = logging.LogRecord(name, level, fn, lno, msg, args, exc_info,\n                                   **kwargs)\n        record.__dict__.update(structured)\n        return record\n", "answers": ["        if sys.version_info[0] == 2:"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                                m.Skills.Spellweaving.BaseFixedPoint += 1;\n                            }\n                            else\n", "answers": ["                                m.Mana -= 20;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            for key, value in hash_.items():\n                if key in model._meta.fields:\n                    fields[key] = value\n", "answers": ["            for k, v in hash_.iteritems():"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            return page_not_authorized(req=req, referer=\"/edit\",\n                                       text=auth_message, navtrail=navtrail)\n        recid = argd['recid']\n        body, errors, warnings = perform_request_newticket(ln, recid)\n        return page(title = _(\"New Ticket\"),\n                    body =", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "          - key: use_tty\n", "answers": ["        - {key: usetty, section: ssh_connection}"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tint index = DataCollection.add();\n\t\t\tdataString += \"RSNO\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + DataCollection.get(x).Rsno;\n\t\t\tdataString += ims.dto.NAS", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            record_add_field(rec, '300', subfields=[('a', page_count)])\n        abstract = self.get_abstract(xml)\n        if abstract:\n            record_add_field(rec, '520', subfields=[('a', abstract)])\n        keywords = self.get_keywords(xml)\n        if keywords:\n            for kwd_type", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                assertEquals(A.getQuick(r, c), B.getQuick(c, r));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(NCOLUMNS, row.size());\n        for (int c = 0;", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                 lambda pkt: pkt.commandId == 0x6f),\n                # Send Unit Data\n", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t//... BUSINESS LOGIC... //\n\t\t//... BUSINESS LOGIC... //\n\t\t//... BUSINESS LOGIC... //\n\t\t//... BUSINESS LOGIC... //\n\t\t//... BUSINESS LOGIC... //\n\t\t//... BUSINESS LOGIC... //\n\t\t//... BUSINESS LOGIC... //\n\t", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            ((Creature) e).setTamed(false);\n        }\n        \n        return e;\n    }\n} \nPlease complete the code given below. \n\n```java\n", "answers": ["            Creature c = (Creature) e;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tMemoryStream ms = new MemoryStream(stream);\n\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta )\n\t\t\t{\n\t\t\t\tbin.BaseStream.Seek(", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                    if (house!= null)\n                        bonus = 50.0;\n                }\n                //int range = 18 - (int", "answers": ["                    if (house == null)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    \"\"\" Find the appropriate reader for a file \"\"\"\n    ext = os.path.splitext(fname)[1][1:]\n    if ext in supported_extensions():\n        return supported_extensions()[ext]\n    else:\n        raise ValueError(\"File %s has unknown extension %s\" % (fname, ext)) \n\nPlease note that the code", "answers": ["    exts = supported_extensions()"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = 0;\n\t\t\t\t\t\t\tmore = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (cgn.depth > maxDepth)\n\t\t\t\t\t\t\tmaxDepth = cgn.depth;\n\t\t\t\t\t\t// place", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t    case 188: // -/_ key\n", "answers": ["\t\t\t    case 189: // -/_ key"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "out_list += [weights_dmat_all[index]]\nout_comment += ['Weights of distortion matrix']\nout_units += ['']\nresults.write(\n    out_list,\n    names=out_names,\n    header=header,\n    comment=out_comment,\n    units=out_units,\n    extname='DATA')\nresults.close()\nuserprint(f'", "answers": ["        out_list += [weights_dmat_all[index]]"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    obj = obj.lstrip(\"\\ufeff\") if obj.startswith(\"\\ufeff\") else obj\n\nThis is the corrected code:\n```python\n", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\tif (orig == null ||!orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newUuid);\n\t}\n\t/**\n\t * Copy the UUID-based cover from its current location", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            strength += calculateBestTableStrength(opponent.getValue());\n        }\n        tableStrengthScore.setScore(Collections.singletonList(strength));\n        tableStrengthScore.setPlayer(player);\n        this.addAScore(tableStrengthScore);\n    }\n}\npackage usspg31.tourney.model;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            res = c.get(\"/\")\n            res.get_data()\n            assert res.status_code == 401\n", "answers": ["            res = c.get(\"/\")"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            nsClientService = mLocalBinder.getService();\n            nsClientReceiverDelegate.onStatusEvent(new EventNSClientStatus(\"Connected\"));\n        }\n    };\n    private void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (autoscroll) {\n            handler.post(() -> {\n                text", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "```python\n", "answers": ["            if arch == \"amd64\":"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttowerList[index].baseStat.costs[i]=tempCostList[i];\n\t\t\t}\n\t\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\tindex = AddCraft( typeof( RuneAxe ), 1011082, 107", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    def test_gwt_plurals(self):  # pylint: disable=invalid-name\n", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tforeach (object member in members) {\n\t\t\t\tif (member is Signal) {\n\t\t\t\t\tSignal sig = member as Signal;\n\t\t\t\t\tsw.WriteLine (\"\\t\\tpublic event \" + sig.CName + \"EventHandler \" + sig.CName + \";\");\n\t\t\t\t} else if (member is VirtualMethod) {\n\t\t\t\t\tV", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    module = AnsibleModule(argument_spec=fields)\n    try:\n        from fortiosapi import FortiOSHandler\n", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableTextContainer(Element presentableTextContainer) {\n    this.presentableTextContainer =", "answers": ["    if (node instanceof MutableNode) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            return GroupByWithMinSize(prevChildren, c => c.Published.HasValue? c.Published.Value.Date.ToString(\"yyyy-MM-dd\") : \"-\")\n               .Select(g => childFactory(query.Parent, g.Key, \"virtual-grouping/\" + g.Key, () => g));\n        }\n        private IEnumerable<Content", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        soaResponse = dns.message.make_response(query)\n        soaResponse.use_edns(edns=False)\n        soaResponse.answer.append(soa)\n        responses.append(soaResponse)\n        response = dns.message.make_response(query)\n        response.use_edns(edns=False)\n        content = \"\"\n        for i in", "answers": ["        soaResponse = dns.message.make_response(query)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        if (kind == null) {\n            throw new IllegalArgumentException(\"Unknown javaccKind: \" + javaccKind);\n        }\n        return kind;\n    }\n} \nPlease complete the code given below. \n/**\n * Copyright (C) 2017 drrb\n", "answers": ["        if (kind == null) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        }\n    }\n} \n\nPlease complete the code given above. \n```csharp\n", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            query_string = urllib.urlencode(query_args)\n            path = path + '?' + query_string\n", "answers": ["            path += '?' + query_args"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), left, top, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate void drawPath(Canvas canvas, double localScale){\n\t\tfor(int i = 0; i < edges.size(); i++){\n\t\t\tGraphEdge edge = edges.get(i);\n\t\t\tLat", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            HueInfo.Add(DyeType.None, new Tuple<int, int>(0, 0));\n            HueInfo.Add(DyeType.WindAzul, new Tuple<int, int>(0x1A1, 0x1A", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                this.alertDialog.show(MSGS.deleteCertificate(), MSGS.deleteCertificateConfirm(), new ConfirmListener() {\n                    @Override\n", "answers": ["                final Modal modal = new Modal();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable, New}}, S As System.IDisposable)(){0}\" +\n\t\t\t\t\"        End Sub{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t", "answers": ["\t\t\t\t\"    {0}\" +"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            list.append(self.file + os.extsep + ext)\n        return list\n    \n    def do_open(self, flags):\n        self.dbm = self.dbmmodule.open(self.file, flags)\n        \n    def do_close(self):\n        self.dbm.close()\n        \n    def open(self, flags, checkcount=False):\n", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        return \"ImageIcon: \" + description;\n    }\n    /**\n     * Returns the accessible description of the icon.\n     *\n     * @return the accessible description of the icon\n", "answers": ["        if (description != null) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "all_plugins = self._bot.plugin_manager.get_all_plugin_names() \n\nPlease note that the code you provided is a part of the errbot plugin and it seems like you are trying to get a list of all plugins, whether they are active or not. The function `formatted_plugin_list` is defined to return a list", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                \"vdom\": {\"required\": False, \"type\": \"str\"}\n            }\n        }\n    }\n    module = AnsibleModule(argument_spec=fields)\n    if not module._socket_path:\n        connection = Connection(module._ansible_connection)\n        if not connection:\n            module.fail_json(msg=FAIL_SOCKET_MSG", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n    }\n    private native int readByte(Object fileDecoder);\n    private native int bytesRemain(Object fileDecoder);\n    private native int readBytes(Object fileDecoder, byte b[], int off, int len);\n    private native Object clone(Object fileDecoder", "answers": ["            throw new IOException();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\treturn originalObject!= null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence!= null &&!traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}\n}  // TracedActivityImpl\n", "answers": ["\t\t\t\treturn originalObject != null;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t// TODO: implement this method\n", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    if not module.check_mode:\n        if state == 'present':\n            changed = publication.create(tables, params, owner, check_mode=False)\n            if not changed:\n                changed = publication.update(tables, params, owner, check_mode=False)\n        elif state == 'absent':\n            changed = publication.drop", "answers": ["    if state == 'present':"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tint version = reader.ReadInt();\n\t\t\tif ( version == 0 )\n\t\t\t{\n\t\t\t\t// Add code here to handle version 0\n", "answers": ["\t\t\tint version = reader.ReadInt();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        return T.mean(T.sum(pre_sigmoid_nv * T.log(pre_sigmoid_nv) +\n                            (1 - pre_sigmoid_nv) * T.log(1. - pre_sigmoid_nv), axis=1)) \n```python\n", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        super(edge);\n        role = new FigRole();\n        addPathItem(role, new PathItemPlacement(edge, role, 0, 5, -135, 5));\n        ordering = new FigOrdering();\n        addPathItem(ordering, new PathItemPlacement(edge, ordering, 0, ", "answers": ["        role = new FigRole();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                    throw ex;\n                }\n            }\n        }\n    }\n}\n#endif\n", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            name,checksum = checksums.get(block=False)\n            assert os.path.isfile( pjoin( cfg.webdav_backend_directory, name) )\n    except Queue.Empty:\n        pass\n", "answers": ["            name, checksum = checksums.get(block=False)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        stac = self.labels.setdefault(args[0], stac)\n        self.stack_count = stac\n", "answers": ["        dest = args[0]"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tresult.append((ofs, \"\\x00\" * mem_len))\n\t\t\t\tlen -= mem_len\n", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tint endIndex = value.indexOf(\"}\", startIndex);\n\t\t\tif (endIndex == -1) {\n\t\t\t\tthrow new IllegalArgumentException(\"Macro not closed!\");\n\t\t\t}\n\t\t\tString macroName = value.substring(startIndex + 2, endIndex);\n\t\t\tString macroValue = macroHandler.getMacroValue(macroName);\n\t\t\tif (", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "      elements.add(ASN1Boolean.encodeAsBoolean(false));\n    }\n    if (! includeAuthZEntry)\n    {\n      elements.add(ASN1Boolean.encodeAsBoolean(false));\n    }\n    if (attributes!= null)\n    {\n      final ArrayList<ASN1Element> attributeElements = new ArrayList<>(attributes.size());\n", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\treturn new EmptyIterator<String>();\n\t\t}\n\t}\n} \npackage com.idevicesinc.sweetblue;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport android.content.Context;\nimport com.idevicesinc.sweetblue.utils.EmptyIterator;\nimport com.idevicesinc.s", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            var httpRes = new HttpResponseStreamWrapper(httpResponse.OutputStream);\n            serializer(requestContext, response, httpRes);\n        }\n        public void DeserializeFromStream(IRequestContext", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            launchUrl(createUrl(CallNumber.ToString(), ContactTypes.Lead));\n        }\n    }\n    public void ShowPhoneCallRecord(string CallNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.NotLoggedIn\"));\n        Guid CallNumber", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        }\n    }\n} \npackage org.intermine.sql.query;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n/**\n * Subclass of ExplainResult specific to PostgreSQL.\n *\n * @author Matthew Wakeling\n", "answers": ["        text = text.substring(nextToken + 7);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        n = m + i16 - 2;\n        i27 = i26 + i16 - 1;\n        i29 = i28 + i16 - 1;\n        i25 = 1;\n        if ((paramInt1!= 0? 0 : 1)!= 0)\n", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                if (constraintEntry.startsWith(\"keySize\")) {\n                    Matcher matcher = keySizePattern.matcher(constraintEntry);\n                    if (matcher.matches()) {\n                        String op = matcher.group(1);\n                        int size = Integer.parseInt(matcher.group(2));\n                        addConstraint(constraintEntry, op, size);\n                    }\n", "answers": ["                if (debug != null) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "      DefaultPort proxy_port = proxyCell.getPort(0);\n      DefaultPort device_port = null;\n      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();\n      ConfigElement proxy_elt = proxy_info.getProxyElement();\n      ConfigElement dev_elt = proxy_elt.getProperty(DEVICE_PROPERTY, 0);\n     ", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def create_multidimensional_dict(n, dict_type):\n    \"\"\"Recursive function to create a multidimensional defaultdict\n", "answers": ["                for song in self.collection[artist][album]:"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        SecurityManager sm = System.getSecurityManager();\n        if (sm!= null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    private static void checkForDuplicatePkgs(Configuration cf,\n                                              Function<String, ClassLoader> clf)\n    {\n        Map<String, ClassLoader> map =", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t//add a note\n", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    }\n} \nPlease complete the code given above. \n\n```java\n", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tAssert.That (Read<int> ().SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{\n\t\t\tvar source = Read (1);\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (1));\n\t\t}\n\t\t", "answers": ["\t\t\tvar source = Read<int> ();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i = 0; i < tempValues.length; i++) {\n\t\t\t\t\t\tString v = tempValues[i];\n\t\t\t\t\t\tString d = tempDomains[i];\n\t\t\t\t\t\t// check if invalid value\n", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    return self._conf_helper('sp', options) \n    return self._conf_helper('sp', options) \n    return self._conf_helper('sp', options) \n    return self._conf_helper('sp', options) \n    return self._conf_helper('sp', options) \n    return self._", "answers": ["        if dev_obj == self.fetch:"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    return success? suggestedClassName : null;\n  }\n  /**\n   * Get the path to the main.pde file.\n   * @return the path to the main.pde file.\n   */\n  public String getMainFilePath() {\n    return primaryFile.getAbsolutePath();\n  }\n  /**\n   * Get the", "answers": ["    return success ? suggestedClassName : null;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            Workplane().box(1,1,1).edges(\"+Z\").fillet(0.1)\n        Fillets are one of the cases where you may need to use the add method to select several\n", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            sleep(0.01)\n        # Reading FIFO count\n", "answers": ["            fifoCount = self.getFIFOCount()"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def bulk_print_memberships(names):\t\n\t#frappe.msgprint(names)\n\tif names and 'names' in names:\n\t\t#frappe.msgprint(names['names'])\n\t\tif names['names']:\n\t\t\t#frappe.msgprint(names['names'])\n\t\t\tif len(names['names']) > 0:\n", "answers": ["\t\tnames = names['names']"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\talDaten.add(oZeile);\n\t\t\t}\n\t\t} catch (RemoteException e) {\n\t\t\tthrow new EJBExceptionLP(EJBExceptionLP.FEHLER_IN_ZEITDATEN,\n\t\t\t\t\tnew Exception(e));\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tsession.close();\n\t\t\t}", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                list.Add(1072375); // Missing Set Item\n", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "         sb.append((char) ('a' + d - 10));\n      }\n      d = (c >> 6) & 0x3f;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else {\n         sb.append((char)", "answers": ["         sb.append((char) ('a' + d - 10));"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tif (type == PacketTypes.PlayerInfo)\n\t\t\t{\n\t\t\t\t// This is a player info packet, which is sent when a player joins or leaves the server.\n\t\t\t\t// We can use this to update the player list.\n\t\t\t\tTSPlayer player = Players[e.Player];\n\t\t\t\tif (player!= null", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        // create path and map variables\n", "answers": ["        if (organizationId == null) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "class Dyn(CStruct): \n    _fields = [ (\"tag\",\"ptr\"), \n                (\"value\",\"ptr\") ] \n    # Legal values for d_tag (dynamic entry type).\n    DT_NULL         = 0               # Marks end of dynamic section\n", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                html.WriteLine(\"      table { width: 100%; }\");\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"      <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"styles.css\\\" />\");\n                html.WriteLine(\"   </head>\");\n                html.WriteLine(\"   <body>\");\n                html.WriteLine", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\t// wait for the read to finish\n", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])\n                    min_distance = min_distance - side_distances[node.split_dim] + sd[node.split_dim]\n                else:\n                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim]) ** p\n", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t} \nPlease note that the code you provided is a test class and it seems like you are trying to test the functionality of a chess game. The code you provided is a mix of test methods and test cases. It seems like you are trying", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    catch (ReadOnlyException e) {\n      throw new Error(\"internal error - unexpected exception: \" + e);\n    }\n    return null;\n  }\n  /**\n   *  Draw the features of the forward and reverse strands into a Graphics\n", "answers": ["    catch (InvalidRelationException e){}"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type!= null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add(type);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (version >= 2)\n\t\t\t{\n\t\t\t\tm_FightMode = (FightMode)reader.ReadInt", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\t\t\t\tif(newsector!= null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Mark the new sector\n", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        doc = Document.objects.get(locale=document_locale,\n                                   slug=document_slug)\n    except Document.DoesNotExist:\n        doc = None\n", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                lDummyHeights[i] = lNewMaxRows;\n            }\n            \n            // now we'll create new rows and columns\n", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchAnimatorStateTransition( Object unityObject )\n\t\t{\n\t\t\tAnimatorStateTransition animatorStateTransition = (AnimatorStateTransition) unityObject;\n\t\t\t", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\t\tif (trait!= null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.Value.Nodes.Add(new MiniYamlNode(\"-InvulnerabilityMultiplier@EXPERIENCE\", emptyYaml));\n\t\t\t\t\t\t\tnode.Value.Nodes.Remove(trait);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Replace InvulnerabilityUpgrade\n", "answers": ["\t\t\t\t\t\tif (trait != null)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        return self.__class__(values, key=self._key)  # type: ignore\n", "answers": ["        return self.__class__(values, key=self._key)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        self._flushing = True\n", "answers": ["        for state, dict_ in states.items():"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                    else if (this.RequiredRace == Race.Gargoyle)\n                        from.SendLocalizedMessage(1111707); // Only gargoyles can wear this.\n                    else\n", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_PHRASE_TABLE\" },\n\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 221, name = \"FULLTEXT_THESAURUS_PHRASE_TABLE", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");\n            ContentValues contentValues;\n            if (emailTypes!= null && emailTypes.length", "answers": ["        if (emails == null) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            if (Diff.Count > 0)\n            {\n                result[\"diff\"] = Diff;\n            }\n            if (Result.ContainsKey(\"exception\"))\n                result[\"exception\"] = RemoveNoLogValues((string)result[\"exception\"], noLogValues);\n            if (Result.ContainsKey(\"failed\"))\n                result[\"failed\"] =", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tblock = new byte[allowableBlockSize + 2];\n\t\t}\n\t}\n} \n```\nThe code is a BZip2OutputStream class that compresses data into the BZip2 format. The class is designed to be used with the SharpZipLib library. The code is written in C# and", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                        int actor = args[1];\n                        int x = args[2];\n                        int y = args[3];\n                        int obj = GetObjectIndex(args[4]);\n                        if (obj!= -1)\n                        {\n                            var a = Actors[actor];\n                            if (a!= null && a.IsInCurrent", "answers": ["                        var a = Actors[args[1]];"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                    if (iFile!= null)\n                        iFile.close();\n                }\n            }\n            catch (final ObjectStoreException ex)\n            {\n                ex.printStackTrace();\n                throw ex;\n            }\n            catch (final Exception ex)\n            {\n                ex.printStackTrace();\n                throw new ObjectStoreException(ex.toString(), ex);\n            }\n", "answers": ["                    if (iFile != null)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\ttrackError = Math.max( trackError, trackSegmentError ) ;\n\t\t}\n\t\n\t\treturn trackError ;\n\t}\n\t/**\n\t * Calculates the distance between two points.\n\t *\n\t * @param first \t1st point.\n\t * @param second \t2nd point.\n\t *\n", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Function Something(<A(), B()> ByVal value As Object, <C(A1:=false, A2:=true), D()> ByRef __exception As Integer) As Integer{0}\" +\n\t\t\t\t\"End Interface{0}\", NewLine), code);\n", "answers": ["\t\t\t\t\"    {0}\" +"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            Spells.Add(\n                new SpellData\n", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                            m_House.Delete();\n                            m_From.SendGump(new HousePlacementListGump(new HousePlacementTool(), m_From, m_Entries));\n                        }\n                    }\n                }\n            }\n        }\n    }\n    public class PreviewHouse : BaseHouse\n", "answers": ["                            if (m_House.MovingCrate != null)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\tplot = new Plot();\n\t}\n\tvoid showPlot() {\n\t\tif (plot==null)\n\t\t\tinterp.error(\"No plot defined\");\n\t\tplot.show();\n\t}\n\tvoid updatePlot() {\n\t\tif (plot==null)\n\t\t\tinterp.error(\"No plot defined\");\n\t\tplot.update();\n\t", "answers": ["\t\tString title = getFirstString();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                    widgetName = xbmc.getInfoLabel( widgetName )\n                if widgetName == \"\":\n                    widgetName = LANGUAGE(32053)\n                if self.currentWindow.getProperty( \"useWidgetNameAsLabel\" ) == \"true\" and widgetID == \"\":\n                    self._set_label( listitem, widgetName )\n                    self", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        return encodeBytesToBytes( source, 0, source.length, NO_OPTIONS );\n    }   // end encodeBytesToBytes\n    \n    /**\n     * Similar to {@link #encodeBytes(byte[], int, int)} but returns\n", "answers": ["        byte[] encoded = null;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[iand] = \"iand\";\n            mnem[land", "answers": ["            mnem[ishr] = \"ishr\";"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def _get_selinux_context(self, path, context=None): \n```\n\nThe final answer is: \n```\ndef _get_selinux_context(self, path, context=None):\n    if not HAVE_SELINUX or not self.selinux_enabled():\n        return context\n", "answers": ["            umask = os.umask(0)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\tdo {\n\t\t\t\t\t\tMenus [selected].Current = (Menus [selected].Current+1) % Menus [selected].Children.Length;\n\t\t\t\t\t} while (Menus [selected].Children [Menus [selected].Current] == null);\n\t\t\t\t\tif (Menus [selected].Children [Menus [selected].Current].", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        if (lastScanOffset + pixelStride > data.length)\n        {\n            throw new RasterFormatException(\"Data buffer has not enough capacity\");\n        }\n    }\n    /**\n     * Returns the number of bands in the Raster.\n     */\n    public int getNumBands() {\n        return sampleModel.getNumB", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        return int(open(filename).read().split()[1])\n    def get_used_mem(self):\n        \"\"\"\n        Returns the VM's used memory.\n        :return: Used memory by VM (MB)\n        \"\"\"\n        if self.is_dead():\n            logging.error(\"Could not get used memory info from dead VM.\")\n            return", "answers": ["        shm = int(open(filename).read().split()[2])"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "g.parser.add_argument('exclude_metadata', type=strict_bool, location='args', default=True)  # noqa\n", "answers": ["    exclude_types = args.get('exclude_types')"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "class CourseEnrollmentAudit(models.Model):\n    \"\"\"\n    This model is used to track the history of enrollments for a user in a course.\n    \"\"\"\n    #... (rest of the code remains the same)\n```\nThe final answer is: \n```\nclass CourseEnrollmentAudit(models.Model):\n    \"\"\"\n   ", "answers": ["    objects = CourseEnrollmentManager()"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        system_id = self.get_system_id(system)```\n\nThe final answer is: \n\n```\nsystem_id = self.get_system_id(system)\n```", "answers": ["        system_id = self.get_system_id(system)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "'        'types': ('general-music','sequential-music',),\n    },\n    'xNotesOn': {\n        'name': 'SequentialMusic',\n        'type': 'ly:prob?',\n        'types': ('general-music','sequential-music',),\n    },\n    'xNotesUp", "answers": ["        'types': ('general-music', 'sequential-music',),"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            X           -   array[0..N-1] - array of quadrature nodes,\n                            in ascending order.\n            W           -   array[0..N-1] - array of quadrature weights.\n          -- ALGLIB --\n             Copyright 12.05.2009 by Bochkan", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        self.assertEqual(updated_block.children[0].version_agnostic(), block.children[0].version_agnostic())\n```\n\n\nThe code provided is a test class for the `SplitModuleTest` class. The test class is designed to test the functionality of the `SplitModuleTest` class, which is responsible for testing the", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                                    + Long.toString((long) Math.rint(Math.abs(i))));\n                                }\n                                else {    //not \"log10\"-type label\n", "answers": ["                                            + \"10^\" + Math.abs(i));"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "               .map(PushedAsset::getAssetId)\n               .collect(Collectors.toList());\n        assertEquals(1, newBundlePushedAssets.size());\n    }\n    private void assertAll(final PushPublisherConfig config, final Collection<Object> dependencies) {\n        final List<ManifestItem> manifestItems = new ArrayList<>();\n        for", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        setRequestContext(user1);\n        // Create a document\n", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            return obj!= null;\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n    }\n} \nPlease complete the code given above. \n```java\n", "answers": ["            if (obj == null) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                                if (grapple.DockUid!= part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Part not attached or grappled by parent grappling part: \" + grapple);\n                                    Syntax.Warning(grapple, \"Grappling part is parent of other part, but is not grappled to it: \"", "answers": ["                                if (grapple.DockUid != part.Uid)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            if not xml_id:\n                return False\n", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setSynchronizeCode() {\n            actionTL.setVolatile(SYNCHRONIZE_CODE);\n        }\n", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name, value, (ulong) size);\n\t\t}\n\t\t// fget", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        return encodeBytesToBytes( source, off, len, options, MAX_LINE_LENGTH );\n    }   // end encodeBytesToBytes\n    \n    /**\n     * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n", "answers": ["        if( source == null ){"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedPrecisionScale\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsLong\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tBigInteger v2 = u1.OuterProduct(v1, q[0]);\n\t\t\t\tBigInteger u2 = q[1];\n\t\t\t\tu1 = u2.OuterProduct(u1, q[0]);\n\t\t\t\tv1 = v2.OuterProduct(v1, q[0]);\n\t\t\t\tu3 =", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tif (_abi_info == null)\n\t\t\t\t\t_abi_info = GLib.AbiStruct.GetAbiStruct(typeof(Message));\n\t\t\t\treturn _abi_info;\n\t\t\t}\n\t\t}\n\t}\n#endregion\n", "answers": ["\t\t\t\tif (_abi_info == null)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                if (name.endsWith(\".xmi\")) {\n                    name = name.substring(0, name.length() - 4);\n                }\n                Configuration.setString(\n                        PersistenceManager.KEY_PROJECT_NAME,\n                        name);\n            }\n            return theFile;\n        } else {\n            return null;\n        }\n    }\n    /**\n     *", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            5: SortableHeader('Outline', False, '', 'col-center'),\n            6: SortableHeader('Script', False, '', 'col-center'),\n            7: SortableHeader('Slide', False, '', 'col-center'),\n            8: SortableHeader('Video', False, '',", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][][] sssi1 = new string[][][] { ss11, ss12 };\n            string[]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            field = opts.get_field(unique_check[0])\n            return ValidationError(\n                message=field.error_messages['unique'],\n                code='unique',\n                params=params\n", "answers": ["            field = opts.get_field(unique_check[0])"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            for key, value in sorted(paramtestdic.iteritems()):\n                paramout.write(\"%-3s \\t %.5f\\n\" % (key,value))\n            paramout.close()\n        print \"PASO %i: %f\"%(cyclemin,totalerror)        \n        \n        if cyclemin >= maxcycleminimization", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    for i in range(0, len(h), 20):\n        heads.append(h[i:i+20])\n    return heads\n", "answers": ["    while len(h) == 20:"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        if(contentPaneStyle.getBorder()!= null) {\n            prefWidth = Math.max(contentPaneStyle.getBorder().getMinimumWidth(), prefWidth);\n            prefHeight = Math.max(contentPaneStyle.getBorder().getMinimumHeight(), prefHeight);\n        }\n        return new Dimension(prefWidth, prefHeight);\n    }\n", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        cell_attributes = AttrDict(literal_eval(cas_data_str))\n        cell_attributes = AttrDict(cell_attributes)\n        cell_attributes = AttrDict(cell_attributes)\n        cell_attributes = AttrDict(cell_attributes)\n        cell_attributes = AttrDict(cell_attributes)\n        cell_attributes = AttrDict(cell_attributes)\n        cell_attributes = Attr", "answers": ["        cas = literal_eval(cas_data_str)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tif (pixel == cursor_pixel) {\n\t\t\t\t\t\tcursor_bits[(y * (width / 8)) + (x / 8)] |= (byte)(1 << (7 - (x % 8)));\n\t\t\t\t\t}\n\t\t\t\t\tpixel = cursor_mask", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tInterval interval=new Interval(apptLengthMins);\n\t\t\t//Loop through all the operatories that are flagged for Web Sched.\n\t\t\tfor(int i=0;i<listWebSchedOpNums.Count;i++) {\n\t\t\t\tOperatory op=Operatories.GetOp(listWebSchedOpNum", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                      pMem1.enc == SQLITE_UTF16LE ||\n                      pMem1.enc == SQLITE_UTF16BE );\n        rc = sqlite3StrICmp( pMem1.z, pMem2.z, pMem1.n, pMem2.n, pMem1.enc );\n        if ( rc!= 0 )\n", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                    data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);\n                    }\n                }\n            }\n            if (changesMask[124])\n            {\n                for (var i = 0; i < 6; ++i)\n                {\n                    if (changesMask[125 + i])\n                   ", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        # get snps for this locus (1-indexed locus idxs)\n        self.locsnps = self.snpsmap[self.snpsmap[:, 0] == self.locidx]\n        # get global trim for this locus (0-indexed edge arr)\n        self.gtrim = edges[self.localidx -", "answers": ["        seq = self.seqs[nidx]"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            Index ix = indexByTagAndClass[tag];\n            if (ix == null) {\n                ix = new Index(tagName(tag)+\":\"+classRef.stringValue(), new Entry[0]);\n                indexByTagAndClass[tag] = ix;\n            }\n            // Find all entries of the given tag and class.\n           ", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            this.quoteLabel.Size = new System.Drawing.Size(0, 0);\n            this.quoteLabel.TabIndex = 0;\n            this.quoteLabel.Text = \"quoteLabel\";\n            this.quoteLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;\n            this.quoteLabel.Visible = false;\n            // \n            // processor\n", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            data['rrule_type'] = rrule_type[rule._freq]\n        if rule._byweekday:\n            for day in day_list:\n                data[day] = rule._byweekday[day_list.index(day)]\n        if rule._bymonthday:\n            data['day'] = rule._b", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                // Copy the decoded row to the output stream\n", "answers": ["                fout.Write(curr, 0, curr.Length);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "      get { return DefaultInstance; }\n    }\n    \n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n    \n    public static pbd::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.exchange_object_provider.ExchangeObjectProviderTypes.internal__static_bnet_protocol_exchange", "answers": ["      get { return DefaultInstance; }"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;\n                        MainDs.AApAnalAttrib.DefaultView.RowFilter = String.Format(\"{0}={1} AND {2}={3}\",\n                            AApAnalAttribTable.GetDetailNumberDBName(), DetailRow.DetailNumber,\n                           ", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tOwner.SendMessage(\"Reward for quest '{0}' has been automatically awarded.\", Name);\n\t\t\t\t// award the reward\n", "answers": ["\t\t\t\tif (RewardItem != null)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t            return items.Length;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        return global::System.Collections.Generic.Comparer<TKey>.Default.Compare(key, items[0].Key) <= 0;\n\t    }\n\t    public bool TryGetValue(TKey key, out TValue value)\n\t    {\n\t        int", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                if (AControlLabel!= null)\n                {\n                    AControlLabel.Name = \"lblArgument_\" + AControl.Name;\n                    AControlLabel.Font = new System.Drawing.Font(\"Verdana\", 8.0f);\n                    AControlLabel.AutoSize = true;\n                    AControlLabel.Tag = CommonTagString.ARG", "answers": ["                if (AControlLabel != null)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/> is used to determine uniqueness.\n\t\t/// </summary>\n\t", "answers": ["\t\t\treturn Unique(target, null);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t.Append (base.ToString ())\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n#endregion\n", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                chr.IsColliding = false;\n            }\n            foreach (OdePrim prim in _prims)\n            {\n                // Reset the collision values to false\n", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    for t in ts:\n        t.start()\n    # wait for all threads to finish\n", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        digits=dp.get_precision('Product Price'), default=_default_price_unit)\n    discount = fields.Float(string='Discount (%)', digits=dp.get_precision('Discount'),\n        help=\"Discount percentage on the unit price.\")\n    quantity = fields.Float(string='Quantity', digits=dp.get_precision('Product Unit of Measure'),\n", "answers": ["        digits= dp.get_precision('Product Price'),"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def _get_parameters(self, *parameter_names):\n    \"\"\"Return a ParameterSpace object containing the values of the given parameters\n", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                return -value.doubleValue();\n            }\n        };\n    }\n    /**\n     * Creates a boolean negation expression.\n     *\n     * @param operand\n", "answers": ["                Class<? extends Number> type = value.getClass();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            Spells.Add(\n                new SpellData\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                    \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    \n    @Override\n", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "      float crossDim = 0;\n    } while (false);\n    // STEP 7: POSITIONING CHILDREN IN MAIN AND CROSS AXES\n", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tshiftPos = 0.0f;\n\t\t\tforeach ( Y2Axis yAxis in _y2AxisList )\n\t\t\t{\n\t\t\t\tyAxis.DrawGrid( g,", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            if (info < 0)\n                throw new ILArgumentException(\"qr: an error occoured during decomposition\"); \n            return ret; \n        }\n        /// <summary>\n        /// QR decomposition, returning Q and R\n", "answers": ["            if (info < 0)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                if (c!= null) {\n                    c.setFont(getFont());\n                    c.setForeground(getForeground());\n                }\n            }\n        }\n    }\n}/////////////////\n// End of JEditorPane.java\n", "answers": ["                if ((c != null)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tif (c == '\\n') {\n\t\t\t\t\tadvance_line ();\n\t\t\t\t\tcomments_seen = false;\n\t\t\t\t\tgoto Next line of code;\n\t\t\t\t}\n\t\t\t\tif (c == '\\r') {\n\t\t\t\t\tif (peek_char () == '\\n') {\n\t\t\t\t\t\tputback_char = -1;\n\t\t\t\t\t}\n\t\t\t\t\t", "answers": ["\t\t\t\tswitch (c) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        for dep in self.__deps:\n            if DEBUG['pkgck']:\n                print(\"Processing dependency: {}\".format(dep.recipe.getName()))\n            # check if dependency is already provided\n", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            xmlWriter.WriteAttributeString(\"ResizeWidth\", ResizingPanel.GetResizeWidth(pane).ToString());\n            xmlWriter.WriteAttributeString(\"ResizeHeight\", ResizingPanel.GetResizeHeight(pane).ToString());\n            xmlWriter.WriteAttributeString(\"EffectiveSize\", new SizeConverter().ConvertToInvariantString(ResizingPanel", "answers": ["            if (pane.Items.Count > 1)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />\n                        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def _extract(node, name, index = 0):\n    \"\"\"Returns the text of the first child of a node with the given name.\n    If the node has no children with the given name, returns None.\n    If the index is specified, returns the text of the child at the specified index.\n    \"\"\"\n", "answers": ["        if type(text) == int:"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            if (result!= RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n            }\n            else\n", "answers": ["            if (result != RESULT.OK)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                            desc = escape(desc)\n                        output.write(\"      <field name='%s' type='%s' info='%s'/>\\n\" % (field[1], field[0], desc))\n                except:\n                    pass\n", "answers": ["                            desc = escape(desc)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "columnNum, inputSlice[0], inputSlice[1], masterNum)\n      # Update the permanence values\n", "answers": ["                    columnNum // self.coincidencesShape[1],"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        check_nodes = [self.new_node_uuid, self.target_node_uuid]\n      else:\n        raise errors.ProgrammerError(\"Unknown mode '%s'\" % self.mode)\n    if self.disks:\n      self.disks = dict(self.disks)\n    else:\n      self.disks = dict((idx, {}) for", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    complt += '\\t\\t\\t\\t\\t' + optionPrefix + vmap['optName'] +'&& ret=0 \\n'\ndef _parseVMOptions(optionType):\n    \"\"\"Return a list of dictionaries describing the VM options for the given option type.\n    Each dictionary contains the following keys:\n     ", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            }\n        }\n        public virtual bool CanBeHarmful(Mobile m)\n        {\n            if (m == null ||!m.Alive)\n            {\n                return false;\n            }\n            if (m is BaseCreature && ((BaseCreature)m).IsEnemy(this))\n            {\n                return true;\n            }\n", "answers": ["                if (m_ControlMaster != null)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        if (parent!= null) {\n            contains = parent.visibleBoundsContains(x, y);\n        }\n        return contains;\n    }\n    /**\n     * Returns true if the given absolute coordinate is contained inside the visible bounds\n", "answers": ["        if (contains) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                            if (bmp_mono[n1] == 0)\n                                hits1++;\n                        }\n                        if (y + r < image_height)\n                        {\n                            int n2 = ((y + r) * image_width) + x;\n                            if (bmp_mono[n2] == 0)\n                                hits1++;\n                       ", "answers": ["                            side1 += bmp_mono[n1];"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t z = new double[2];\n\t\t\t z[0] = Math.sqrt(3.0) - 2.0;\n\t\t\t z[1] = Math.sqrt(3.0) - 2.0;\n\t\t\t break;\n\t\t default:\n\t\t\t z = new double[1];\n\t\t\t z[0", "answers": ["\t\t\t z = new double[3];"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t// First, check for reserved SQL in the input row r...\n\t\tdatabaseMeta.quoteReservedWords(fields);\n\t\tString quotedTk = tk!= null? databaseMeta.quoteField(tk) : null;\n\t\t\n\t\t// Get the fields that are in the table now:\n\t\tRowMetaInterface currentFields =", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\tbonusFeats[3] = new String[] {\"TRACK\"};\n\t\t\tspecial.get(4).add(\"Favored Enemy: \" + allFE.get(feIndex) + \" +3\");\n\t\t\tallFE.remove(feIndex); // this way we don't get it again\n", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        \"\"\"\n        self.SetToolTipString(\"\")\n        self._tip_item = None\n", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            mute = (m!= 0);\n            return result;\n        }\n        public RESULT setUserData        (IntPtr userdata)\n        {\n            return FMOD_EventCategory_SetUserData(eventcategoryraw, userdata);\n        }\n        public RESULT getUserData        (ref IntPtr userdata)\n        {\n            return FMOD_EventCategory_GetUserData", "answers": ["            mute = (m != 0);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "public class StewartExtLibrarySimonGlenisPtjScript : StewartVarLibraryPtjBaseScript\n", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        \n        return obj;\n    }   // end decodeToObject\n    \n    /**\n     * Attempts to decode Base64 data and deserialize a Java\n", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":\n                    self.layoutNode = e\n", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            {\n                numBits--;\n                uint mask = 0x80000000;\n                for(int i = 0; i < 32; i++)\n                {\n                    if((data[dataLength-1] & mask)!= 0)\n                    {\n                        dataLength--;\n                        break;\n                    }\n                    mask >>=", "answers": ["                numBits = (numBits >> 1) + 1;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        if cdata[0] == node.inputs[0].shape and cdata[1] == node.inputs[1:].shape: \n```python\n", "answers": ["        for pos, idx in enumerate(cdata):"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    is_const=True)\n    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Get(ns3::ObjectBase const * object, std::string const & name, ns3::AttributeValue & attribute) const [member function]\n    cls.add_method('Get', \n                   'bool', \n                  ", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                    Node m = body.getNode(0);\n                    if (m instanceof Node.TemplateText) {\n                        templateTextOptimization = true;\n                    }\n                }\n                if (!templateTextOptimization) {\n                    out.printin(\"String \");\n                    out.print(varName);\n                    out.print(\" = \");\n                    out.print(\"((", "answers": ["                    Node bodyElement = body.getNode(0);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\tif (e.Handled)\n\t\t\t\t\t\treturn PreProcessControlState.Handled;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Msg.WM_KEYUP:\n\t\t\t\tcase Msg.WM_SYSKEYUP:\n\t\t\t\t\tPreviewKeyDownEventArgs e2 = new PreviewKeyDownEventArgs ((Keys)msg.WParam.ToInt32 () | XplatUI.State.ModifierKeys);\n", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        if os.path.exists(md_file_path) is False:\n            return False, 'Pre-processed file {0} does not exist.'.format(md_file_path)\n        # load\n", "answers": ["        if os.path.exists(md_file_path) is False:"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            package = None\n", "answers": ["            package = package.rpartition('.')[0]"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                var methodGroup = (BoundMethodGroup)expression;\n                var method = methodGroup.Method;\n                if (method!= null)\n                {\n                    if (method.IsStatic)\n                    {\n                        Error(diagnostics, ErrorCode.ERR_StaticMethodGroup, syntax, method);\n                    }\n                    else\n", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            search_reg_str = search_terms.replace(' ', r'\\b\\w*\\b')\n        # Make the regular expression not greedy.\n        search_reg_str = r'%s)*?' % search_reg_str\n", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                FvImageSectionObj.FvName = self.__Token\n", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "      headers_phase = PBXHeadersBuildPhase()\n      self.AppendProperty('buildPhases', headers_phase)\n    return headers_phase\n", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    return remote_instance.fetch(url, post={'node_ids': ','.join([str(tn) for tn in x])})[0]\n```python\n", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                        if (decimalPos >= 0) {\n                            throw new IllegalArgumentException(\"Multiple decimal separators in pattern \\\"\" +\n                                pattern + '\"');\n                        }\n                        decimalPos = digitLeftCount + zeroDigitCount + digitRightCount;\n                        useExponentialNotation = true;\n                        minExponentDigits = 0;\n                       ", "answers": ["                        if (useExponentialNotation) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        BeginBatchUndo(self, String cmdName) -> bool\n", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "  exec /usr/bin/lighttpd -f %(lighttpdConfig)s\n", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if (mx == 0 && my == 0) {\n      result = new", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            if module.params['ticket']:\n                vm_service = vms_service.vm_service(ret['id'])\n                graphics_consoles_service = vm_service.graphics_consoles_service()\n                graphics_console = graphics_consoles_service.list()[0]\n                console_service = graphics_consoles_service.console_service(graphics_console.id)\n                ticket = console", "answers": ["        elif state == 'suspended':"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        m = ModeFactory.getMode(\"Channel_queries\", \"filter_child_subscriptions\");\n        DataResult dr = m.execute(params);\n        for (Map row : dr) {\n            Long systemId = (Long) row.get(\"system_id\");\n            ChannelActionDAO ca = new ChannelActionDAO();\n            ca.setSystem", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            for (int i = 0; i < libs.size(); i++) {\n                NativeLibrary nl = libs.elementAt(i);\n                if (nl.name.equals(name)) {\n                    nl.loaded = true;\n                    return true;\n                }\n            }\n            NativeLibrary nl = new NativeLibrary(fromClass, name, isB", "answers": ["            int size = libs.size();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            state.s1 = s0;\n            state.s2 = s1;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        HQRNDState initialization with seed values\n", "answers": ["            hqrndseed(s0, s1, state, _params);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0,      X, Y,      X + 0, Y + VR\n", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        group.add_option(\"-q\", \"--quiet\", dest=\"quiet\", action=\"store_true\", \n                         help=_(\"be quiet, don't print anything\")) \n\n#... rest of the code remains the same...  # pylint: disable-msg=W0105\n", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            for (int i = 0; i < retryCount; i++) {\n```\nThe code snippet is a part of the DataRepository class in the Process Dashboard project. It appears to be a part of the data management system, handling data loading, saving, and consistency checking. The code snippet is incomplete,", "answers": ["            while (!successful && retryCount-- > 0) try {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                    }\n                }\n                moduleBeingBuilt.AddDebugDocument(MakeDebugSourceDocumentForChecksumDirective(normalizedPath, checkSumText, guid));\n            }\n        }\n        private static bool CheckSumMatches(string checkSumText, string sourceHash)\n        {\n            return checkSumText == sourceHash;\n        }\n        private", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                    while self.tok[0]!= ')':\n                        if self.tok[0] == 'TYPE':\n                            typ = self.tok[1]\n                            self.NextToken()\n                            self.expect('IDENT')\n                        name = self.tok[1]\n                        self.NextToken()\n                        params.append((typ, name", "answers": ["                    if self.tok[0] != ')':"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "#-----------------------------------------------------------------------------\n@registry.register\n", "answers": ["        options_value = json_d.get('options', [])"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "          pMem.n = sqlite3Strlen30( pMem.z );\n        }\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        if ( p.pResultSet[i_pMem] == null )\n        {\n          p.pResultSet[i_pMem] = sqlite3Malloc( p.p", "answers": ["          Debug.Assert( pMem.z != null );"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def _fail(self, req, status): \n    ''' \n    ''' \n    # Abort if the simplejson module isn't available \n    assert CFG_JSON_AVAILABLE, \"Json not available\" \n    # Fail if no json data exists in the Ajax request \n    if 'jsondata' not in req.form:", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                disk_type = expected_disk_spec['type'].lower()\n                if disk_type not in ['thin', 'eagerzeroedthick', 'thick']:\n                    self.module.fail_json(msg=\"Invalid disk type '%s'.\"\n                                              \" Valid options are ['thin', 'eagerzeroedthick', '", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\treturn names [(int) ot] [1];\n\t\t}\n\t\tpublic override string GetSignatureForDocumentation ()\n\t\t{\n\t\t\treturn Parent.GetSignatureForDocumentation () + \".\" + GetName (OperatorType) + parameters.GetSignatureForDocumentation ();\n\t\t}\n\t\tpublic override string GetSignatureForError ()\n\t\t{\n", "answers": ["\t\t\treturn names [(int) ot] [1];"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                this.childBranches.Clear();\n                this.RefreshChildren();\n            }\n            /// <summary>\n            /// Collapse this branch\n", "answers": ["                this.Children = new ArrayList();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "class stock_partial_move(osv.osv):\n    _name = \"stock.partial.move\"\n    _description = \"Partial Move\"\n    _columns = {\n        'name': fields.char('Reference', size=64, select=True),\n        'picking_id': fields.many2one('stock.picking', '", "answers": ["        if acc_src == acc_valuation:"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    out : array of datetime64[D]\n        An array with the same shape as ``dates``, containing the adjusted\n", "answers": ["    out : array of datetime64[D]"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                subsets = dim_coord_subset()\n            else:\n                subsets = [slice(None, None)]\n        else:\n            subsets = [slice(None, None)]\n        return subsets\n", "answers": ["                subsets = dim_coord_subset()"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "this.region = region;\n}\n/**\n * Sets the receiver's tool tip text to the argument, which\n", "answers": ["\tlong /*int*/ hRegion = 0;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                    if paper in autoclaim_successful_recs:\n                        autoclaim_successful_recs.remove(paper)\n                    elif paper in autoclaim_unsuccessful_recs:\n                        autoclaim_unsuccessful_recs.remove(paper)\n                autoclaim_data['hidden'] = False\n", "answers": ["                    operation_parts = {'pid': person_id,"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            u\"User %s (%s) opted in to receiving emails from course %s\",\n            user.username,\n            user.email,\n            course_key\n", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def getJSToNativeConversionInfo(type, descriptorProvider, failureCode=None, isDefinitelyObject=False, isMember=False, isArgument=False, invalidEnumValueFatal=True, defaultValue=None, treatNullAs=\"Default\", isEnforceRange=False, isClamp=False, exceptionCode=None, allowTreat", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "class Suppress(TokenConverter): \n    \"\"\"Converter to suppress the output of a given parse expression.\"\"\"\n    def __init__( self, expr ):\n        super(Suppress,self).__init__( expr )\n        self.saveAsList = False\n", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "```python\n", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def UploadSeparatePatches(ui, issue, rpc, patchset, data, options):\n\t#... (rest of the code remains the same)... \n\ndef UploadSeparatePatches(ui, issue, rpc, patchset, data, options):\n\t\"\"\"Uploads a list of patches to the server.\n", "answers": ["          if after == NULL_HASH:"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            url = _get_subfield_value(fft, 'a')\n            if url:\n                # Let's discover the name of the document\n", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        int[] allowedIfds = new int[ifds.length];\n        int counter = 0;\n        for (int i : ifds) {\n            if ((ifdFlags & (1 << (i - 1)))!= 0) {\n                allowedIfds[counter++] = i;\n            }\n       ", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            c = new double[m];\n            i1_ = (n-1) - (0);\n            for(i_=0; i_<=m-n;i_++)\n            {\n                c[i_] = b[i_+i1_];\n            }\n            if( m-n+1<=m-1 )\n", "answers": ["            c = new double[m];"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            \"\\x1FF0\\x1F7F\", /* 1FF0; 1F7F; Case map */\n            \"\\x1FF1\\x1F7E\", /* 1FF1; 1F7E; Case map */\n            \"\\x1FF2\\x1F7", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        try {\n            imagepipe.drawImage(this, bImg, op, x, y);\n        } catch (InvalidPipeException e) {\n            try {\n                revalidateAll();\n                imagepipe.drawImage(this, bImg, op, x, y);\n            } catch (InvalidPipeException e2) {\n                //", "answers": ["        if (bImg == null) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "      char[] pkgName = CharOperation.subarray(fileName, 0, pkgEnd);\n      char[][] compoundName = CharOperation.splitOn('/', pkgName);\n      return JavaCore.createPackageFragment(CharOperation.toStrings(compoundName));\n    }\n  }\n  public static IPackageFragment getPackageFragment(char[] fileName,", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def parse_build_macros(filename, names, overrides=None, properties=None): \n    \"\"\"Parse a qmake compatible file of build system macros and convert it to a \n    dictionary.  A macro is a name/value pair.  The dictionary is returned or \n    None if any of the overrides was invalid. \n   ", "answers": ["                if adding and rhs != \"\":"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                if end_line == t[2][0]:\n                    # same line\n", "answers": ["                start_line, start = t[2]"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "    def parse_poly(self, filename):  # pylint: disable=unused-argument\n\n# The code above is a part of the following project: https://github.com/cado-nfs/cado-nfs.git\n", "answers": ["        with open(filename, \"r\") as inputfile:"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\tif (mediaEncoderItems.Length!= 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentOutOfRangeException(String.Format(CultureInfo.CurrentCulture, \"GallerySetting.RetrieveGallerySettingsFromDataStore cannot parse the media encoder settings for property {0}. Encountered invalid string: '{1}'\", property.Name, mediaEncStr));\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            for k in self.splitKeySet.intersection(tree2.splitKeySet):\n                #print '%s - %s' % (self.splitKeyHash[k].br.len, tree2.splitKeyHash[k].br.len)\n                theSum += abs(self.splitKeyHash[k].br.len - tree2.splitKeyHash", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def _SliceIterator(cube, dims_index, dim_to_slice, ordered):\n    class _SliceIterator(object):\n        def __init__(self, cube, dims_index, dim_to_slice, ordered):\n            self.cube = cube\n", "answers": ["                kwargs = dict(kwargs)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def _listen(\n        cls, event_key, retval=False, **kw):\n    fn = event_key._listen_fn\n", "answers": ["                    return fn(*arg, **kw)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                setMargins(a.getDimensionPixelOffset(MARGIN, DEFAULT_MARGIN),\n                        a.getDimensionPixelOffset(LEFT_MARGIN, DEFAULT_MARGIN),\n                        a.getDimensionPixelOffset(RIGHT_MARGIN, DEFAULT_MARGIN),\n                        a.getDimensionPixelOffset(BOTTOM_MARGIN, DEFAULT_MARGIN));\n            } finally {\n                a.recycle();\n            }\n       ", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(tc, \"getUuid\");\n        return _uuid;\n    }\n    /**\n     * Returns the unique id of this connection.\n     *\n     * @return SIBUuid12 of the connection\n", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                return new SynthesizedIntrinsicOperatorSymbol(leftType, OperatorFacts.BinaryOperatorNameFromOperatorKind(op), rightType, returnType, isChecked);\n            }\n            return new SynthesizedIntrinsicOperatorSymbol(leftType, OperatorFacts.BinaryOperatorNameFromOperatorKind(op), rightType, returnType, isChecked);\n        }\n", "answers": ["                if ((object)leftType == null)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        self.invoke('beforeEvaluate', expression=expression, locals=locals)\n        try:\n            result = self.execute(expression, locals)\n        except MetaError, e:\n            # If a MetaError occurs, then we need to propagate the\n", "answers": ["        if expression in ('1', 'True'): return True"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "      for (int j = 0; j < dsize; j++) {\n        labels[dataIndex][j] = classIndex.indexOf(document.get(j).label());\n        data[dataIndex][j] = new int[windowSize][];\n        for (int k = 0, fSize = document.get(j", "answers": ["      if (featureVals != null)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        /// <summary>\n        /// </summary>\n        internal uint pad0; // internal padding, must be 0\n", "answers": ["        internal string name; // length prefixed name of method"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))\n                contextProfile = _CONTEXT_ES_PROFILE_BIT;\n            // MAJOR & MINOR only introduced in GL {,ES} 3.0\n", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def get_format_from_http_response(response):\n    \"\"\"\n    Given an HTTP response, try to guess the extension of the file.\n    @param response: the HTTP response.\n    @type response: urllib2.HTTPResponse\n", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "def _parse_uda(data, extent, tag_location, tag_serial, tag_ident, tag_version, tag_crc_bytes, tag_crc_length, tag_location, tag_location2, tag_location3, tag_location4, tag_location5, tag_location6, tag_location7, tag_location8, tag_location9,", "answers": ["        self.impl_id = UDFEntityID()"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "```\n    def _wrap_applied_output(self, keys, values, not_indexed_same=False):\n        from pandas.core.index import _all_indexes_same\n", "answers": ["                            result = concat(values, keys=key_index,"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            case 0:\n                if (cursor >= patternLength)\n                    break;\n                // Fall through\n", "answers": ["            case '-': // subFlag then fall through"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n        if (vm == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Unable to find the vm \" + vmUuid);\n            }\n            throw new CloudRuntimeException(\"Unable to find a virtual machine with id \" +", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "class FTPShellTestsMixin(object):\n    \"\"\"Generic tests for the C{IFTPShell} interface.\"\"\"\n    def setUp(self):\n        \"\"\"\n        Create a FTP shell and a filesystem root.\n        \"\"\"\n        self.filesystemRoot = filepath.FilePath(self.mktemp())\n        self.filesystemRoot.createDirectory()\n        self.shell", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                if( b < 0 ) {\n                    break;\n                }   // end if: end of stream\n", "answers": ["                if( b >= 0 ) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            if (b == null)  return a;\n            return new ToolkitEventMulticaster(a, b);\n        }\n        static AWTEventListener remove(AWTEventListener a,\n                                       AWTEventListener b) {\n            if (a == null)  return b;\n            if (b == null)  return a", "answers": ["            if (b == null)  return a;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( results.Count == 1 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAccount a = (Account)results[0];\n\t\t\t\t\t\t\t\tfrom.SendGump( new AdminGump( from, AdminGumpPage.AccountDetails_Information, 0, null, \"One", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            if (result!= RESULT.OK)\n            {\n                return result;\n            }\n            soundnew = new Sound();\n            soundnew.setRaw(soundraw);\n            sound = soundnew;\n            return result;\n        }\n        public RESULT createStream           (string name_or_data, MODE mode, ref CREATESOUNDEXINFO", "answers": ["            if (result != RESULT.OK)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                tbl_ix = data[base] & 255;\n            int huffbits[] = new int[16];\n            int huffval[] = new int[16];\n            int huffbitsLen = 0;\n            int huffvalLen = 0;\n            int huffbitsPos = ", "answers": ["                tbl_ix = data[base] & 255;"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                this.AddButton(x2 + 30, 215, 0xFAB, 0xFAD, 405, GumpButtonType.Reply, 0);\n                this.AddButton(x3 + 30, 215, 0xFAB, 0xFAD, 406, GumpButtonType", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "            return TemplateDT;\n        }\n        /// <summary>\n        /// todoComment\n", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "\t\tfinal LameInternalFlags gfc = gfp.internal_flags;\n\t\tif (gfc!= null) {\n\t\t\tif (gfc.ATH!= null)\n\t\t\t\tgfc.ATH.free();\n\t\t\tif (gfc.PSY!= null)\n\t\t\t\tgfc.PSY.free();\n\t\t\tif (gfc.rg", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "                if (AllSubmissionsOK == false)\n                {\n                    TLogging.LogAtLevel(9,\n                        Messages.BuildMessageFromVerificationResult(\"TPartnerEditUIConnector.SubmitChangesPersonnelData AVerificationResult: \",\n                            AVerificationResult));\n                }\n            }\n            else\n", "answers": ["                if (AllSubmissionsOK == false)"], "length": 0}
{"dataset_name": "lcc_e", "pred_str": "```python\n", "answers": ["                    elif name == \"requires\":"], "length": 0}
